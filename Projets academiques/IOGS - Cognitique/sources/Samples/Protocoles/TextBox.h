/************************************************************************************
 Filename    :   TextBox.h
 Content     :   
 Created     :   November 6th, 2018
 Author      :   Olivier Roupin
 Copyright   :   
 *************************************************************************************/

#ifndef TextBox_h
#define TextBox_h

#include "GL/CAPI_GLE.h"
#include "Extras/OVR_Math.h"
#include "OVR_CAPI_GL.h"
#include <assert.h>

using namespace OVR;

#ifndef VALIDATE
    #define VALIDATE(x, msg) if (!(x)) { MessageBoxA(NULL, (msg), "OculusRoomTiny", MB_ICONERROR | MB_OK); exit(-1); }
#endif

#ifndef OVR_DEBUG_LOG
    #define OVR_DEBUG_LOG(x)
#endif

struct TextBox
{
	int		numModels;
	int		numLetters;
	Model * Models[70];
	char	Letters[256];

	void    Add(Model * n)
	{
		Models[numModels++] = n;
	}

	void AddLetter(char c)
	{
		Letters[numLetters++] = c;
		float originex = (float)((numLetters - 1) % 32) / 40.0f;// -0.5f;
		float originey = (float)((numLetters - 1) / 32) / 40.0f;// -0.5f;
		Model * m;
		if (c >= 'a')
			m = Models[c - 'a' + 37];
		else if (c >= 'A')
			m = Models[c - 'A' + 11];
		else if (c == '?')
			m = Models[66];
		else if (c >= '0')
			m = Models[c - '0' + 1];
		else if (c == '.')
			m = Models[63];
		else if (c == ',')
			m = Models[64];
		else if (c == '!')
			m = Models[65];
		else if (c == '\"')
			m = Models[67];
		else if (c == '\'')
			m = Models[69];
		else if (c == '-')
			m = Models[68];
		else
			m = Models[0];
		m->AddSolidColorBox(originex, originey, 1.0f, originex + 0.025f, originey + 0.025f, 1.0f, 0xffffffff);
		m->AllocateBuffers();
	}

	void AddText(char* w)
	{
		int k(0);
		while (w[k] != '\0')
		{
			AddLetter(w[k]);
			k++;
		}
		for (int i = 0; i < numModels; ++i)
			Models[i]->Pos = Vector3f(-(float)((numLetters - 1) % 32) / 80.0f, -(float)((numLetters - 1) / 32) / 80.0f, 0);
	}

	void EraseText()
	{
		numLetters = 0;
		for (int i = 0; i < numModels; ++i)
		{
			Models[i]->numIndices = 0;
			Models[i]->numVertices = 0;
		}
	}

	void Render(Matrix4f view, Matrix4f proj, bool color = true)
	{
		for (int i = 0; i < numModels; ++i)
			Models[i]->Render(view, proj, color);
	}

	GLuint CreateShader(GLenum type, const GLchar* src)
	{
		GLuint shader = glCreateShader(type);

		glShaderSource(shader, 1, &src, NULL);
		glCompileShader(shader);

		GLint r;
		glGetShaderiv(shader, GL_COMPILE_STATUS, &r);
		if (!r)
		{
			GLchar msg[1024];
			glGetShaderInfoLog(shader, sizeof(msg), 0, msg);
			if (msg[0]) {
				OVR_DEBUG_LOG(("Compiling shader failed: %s\n", msg));
			}
			return 0;
		}
		return shader;
	}

	void Init()
	{
		static const GLchar* VertexShaderSrc =
			"#version 150\n"
			"uniform mat4 matWVP;\n"
			"in      vec4 Position;\n"
			"in      vec4 Color;\n"
			"in      vec2 TexCoord;\n"
			"out     vec2 oTexCoord;\n"
			"out     vec4 oColor;\n"
			"void main()\n"
			"{\n"
			"   gl_Position = (matWVP * Position);\n"
			"   oTexCoord   = TexCoord*40;\n"
			"   oColor.rgb  = pow(Color.rgb, vec3(2.2));\n"   // convert from sRGB to linear
			"   oColor.a    = Color.a;\n"
			"}\n";

		static const char* FragmentShaderSrc =
			"#version 150\n"
			"uniform sampler2D Texture0;\n"
			"in      vec4      oColor;\n"
			"in      vec2      oTexCoord;\n"
			"out     vec4      FragColor;\n"
			"void main()\n"
			"{\n"
			"   FragColor = oColor * texture2D(Texture0, oTexCoord);\n"
			"}\n";

		GLuint    vshader = CreateShader(GL_VERTEX_SHADER, VertexShaderSrc);
		GLuint    fshader = CreateShader(GL_FRAGMENT_SHADER, FragmentShaderSrc);

		// Make textures
#define LETTRES 70

		ShaderFill * lettres[LETTRES];

		static DWORD tex_lettres[LETTRES * 8 * 8] = {
			1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,

			1,0,0,0,0,0,1,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			1,0,0,0,0,0,1,1,
			1,1,1,1,1,1,1,1,

			1,1,0,0,1,1,1,1,
			1,0,0,0,1,1,1,1,
			1,1,0,0,1,1,1,1,
			1,1,0,0,1,1,1,1,
			1,1,0,0,1,1,1,1,
			1,1,0,0,1,1,1,1,
			1,0,0,0,0,1,1,1,
			1,1,1,1,1,1,1,1,

			1,0,0,0,0,0,1,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			1,1,1,1,0,0,1,1,
			1,1,0,0,1,1,1,1,
			1,0,0,1,1,1,1,1,
			0,0,0,0,0,0,0,1,
			1,1,1,1,1,1,1,1,

			1,0,0,0,0,0,1,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			1,1,1,0,0,0,1,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			1,0,0,0,0,0,1,1,
			1,1,1,1,1,1,1,1,

			1,1,1,0,0,0,1,1,
			1,1,0,0,0,0,1,1,
			1,0,0,1,0,0,1,1,
			1,0,1,1,0,0,1,1,
			0,0,1,1,0,0,1,1,
			0,0,0,0,0,0,0,1,
			1,1,1,1,0,0,1,1,
			1,1,1,1,1,1,1,1,

			0,0,0,0,0,0,0,1,
			0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,1,1,
			1,1,1,1,1,0,0,1,
			1,1,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			1,0,0,0,0,0,1,1,
			1,1,1,1,1,1,1,1,

			1,0,0,0,0,0,1,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,1,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			1,0,0,0,0,0,1,1,
			1,1,1,1,1,1,1,1,

			0,0,0,0,0,0,0,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			1,1,1,1,0,0,1,1,
			1,1,1,0,0,1,1,1,
			1,1,0,0,1,1,1,1,
			1,1,0,0,1,1,1,1,
			1,1,1,1,1,1,1,1,

			1,0,0,0,0,0,1,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			1,0,0,0,0,0,1,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			1,0,0,0,0,0,1,1,
			1,1,1,1,1,1,1,1,

			1,0,0,0,0,0,1,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			1,0,0,0,0,0,0,1,
			1,1,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			1,0,0,0,0,0,1,1,
			1,1,1,1,1,1,1,1,

			1,1,0,0,0,1,1,1,
			1,1,0,0,0,1,1,1,
			1,1,0,1,0,1,1,1,
			1,0,0,1,0,0,1,1,
			1,0,0,0,0,0,1,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			1,1,1,1,1,1,1,1,

			0,0,0,0,0,1,1,1,
			0,0,1,1,0,0,1,1,
			0,0,1,1,0,0,1,1,
			0,0,0,0,0,1,1,1,
			0,0,1,1,0,0,1,1,
			0,0,1,1,0,0,1,1,
			0,0,0,0,0,1,1,1,
			1,1,1,1,1,1,1,1,

			1,0,0,0,0,0,1,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,1,1,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			1,0,0,0,0,0,1,1,
			1,1,1,1,1,1,1,1,

			0,0,0,0,0,1,1,1,
			0,0,1,1,0,0,1,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,0,0,1,1,
			0,0,0,0,0,1,1,1,
			1,1,1,1,1,1,1,1,

			0,0,0,0,0,0,0,1,
			0,0,1,1,1,1,1,1,
			0,0,1,1,1,0,1,1,
			0,0,0,0,0,0,1,1,
			0,0,1,1,1,0,1,1,
			0,0,1,1,1,1,1,1,
			0,0,0,0,0,0,0,1,
			1,1,1,1,1,1,1,1,

			0,0,0,0,0,0,0,1,
			0,0,1,1,1,1,1,1,
			0,0,1,1,1,0,1,1,
			0,0,0,0,0,0,1,1,
			0,0,1,1,1,0,1,1,
			0,0,1,1,1,1,1,1,
			0,0,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,

			1,0,0,0,0,0,1,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,1,1,1,
			0,0,1,1,0,0,0,1,
			0,0,1,1,1,1,0,1,
			0,0,1,1,1,0,0,1,
			1,0,0,0,0,0,1,1,
			1,1,1,1,1,1,1,1,

			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			0,0,0,0,0,0,0,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			1,1,1,1,1,1,1,1,

			1,0,0,0,0,1,1,1,
			1,1,0,0,1,1,1,1,
			1,1,0,0,1,1,1,1,
			1,1,0,0,1,1,1,1,
			1,1,0,0,1,1,1,1,
			1,1,0,0,1,1,1,1,
			1,0,0,0,0,1,1,1,
			1,1,1,1,1,1,1,1,

			1,1,1,1,0,0,0,1,
			1,1,1,1,1,0,0,1,
			1,1,1,1,1,0,0,1,
			1,1,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			0,0,1,1,1,0,0,1,
			1,0,0,0,0,0,1,1,
			1,1,1,1,1,1,1,1,

			0,0,1,1,1,0,0,1,
			0,0,1,1,0,0,1,1,
			0,0,1,0,0,1,1,1,
			0,0,0,0,1,1,1,1,
			0,0,1,0,0,1,1,1,
			0,0,1,1,0,0,1,1,
			0,0,1,1,1,0,0,1,
			1,1,1,1,1,1,1,1,
				
				0,0,1,1,1,1,1,1,
				0,0,1,1,1,1,1,1,
				0,0,1,1,1,1,1,1,
				0,0,1,1,1,1,1,1,
				0,0,1,1,1,1,1,1,
				0,0,1,1,1,1,0,1,
				0,0,0,0,0,0,0,1,
				1,1,1,1,1,1,1,1,
				
				0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,0,1,0,1,0,0,1,1,0,0,1,1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,0,1,1,1,0,0,1,1,0,0,1,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,0,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,1,0,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
		};

		for (int k = 0; k < LETTRES * 8 * 8; k++)
			tex_lettres[k] = (tex_lettres[k] == 1) ? 0x50000000 : 0xffffffff;

		static unsigned char* pointeur = (unsigned char *)tex_lettres;
		for (int k = 0; k < LETTRES; k++)
		{
			TextureBuffer * generated_texture = new TextureBuffer(false, Sizei(8, 8), 4, pointeur);
			//TextureBuffer(nullptr, false, false, Sizei(8, 8), 4, pointeur, 1);
			lettres[k] = new ShaderFill(vshader, fshader, generated_texture);
			pointeur += 8 * 8 * sizeof(DWORD);
		}

		glDeleteShader(vshader);
		glDeleteShader(fshader);

		// Construct geometry
		Model * m;
		for (int k = 0; k < LETTRES; k++)
		{
			m = new Model(Vector3f(0, 0, 0), lettres[k]);
			m->AllocateBuffers();
			Add(m);
		}
	}

	TextBox() :
		numModels(0), numLetters(0)
	{
		Init();
	}
	void Release()
	{
		while (numModels-- > 0)
			delete Models[numModels];
	}
	~TextBox()
	{
		Release();
	}
};

#endif // TextBox_h
